class MedianFinder:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min_heap = []
        self.max_heap = []
        heapq.heapify(self.min_heap)
        heapq.heapify(self.max_heap)
        self.size = 0


    def addNum(self, num: int) -> None:
        if self.size%2 ==1:
            if num < -self.max_heap[0]:
                tmp = -heapq.heappop(self.max_heap)
                heapq.heappush(self.min_heap, tmp)
                heapq.heappush(self.max_heap, -num)
                
            else:
                heapq.heappush(self.min_heap, num)

        else:
            if len(self.min_heap) >0 and num > self.min_heap[0]:
                tmp = heapq.heappop(self.min_heap)
                heapq.heappush(self.max_heap, -tmp)
                heapq.heappush(self.min_heap, num)
            else:
                heapq.heappush(self.max_heap, -num)
        self.size +=1
        print(self.min_heap, self.max_heap)
            


    def findMedian(self) -> float:
        if self.size%2 == 1:
            return -self.max_heap[0]
        else:
            return (-self.max_heap[0]+self.min_heap[0])/2
